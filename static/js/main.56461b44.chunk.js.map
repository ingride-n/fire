{"version":3,"sources":["ReverseSalaryCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","goButton","textTransform","border","marginTop","fontSize","fontWeight","closeButton","float","width","margin","DetailsPopup","salary","openDetails","setOpenDetails","classes","Dialog","open","onClose","id","style","preTax","postTax","Button","className","onClick","ReverseSalaryCalculator","useState","annual401k","employerMatch","incomeTax","housingCost","savings","budget","min","max","data","setData","setSalary","calculate","after","parseInt","toFixed","TextField","value","onChange","e","prevData","target","InputProps","startAdornment","InputAdornment","position","minTotals","maxTotals","item","height","padding","textAlign","backgroundColor","box","display","App","show","setShow","Box","map","product","i","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56461b44.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField, Button, InputAdornment, Dialog } from \"@material-ui/core\";\nimport \"./styles.css\";\n\nconst useStyles = makeStyles(() => ({\n  goButton: {\n    textTransform: \"none\",\n    border: \"1px solid black\",\n    marginTop: \"40px\",\n    fontSize: \"16px\",\n    fontWeight: \"bold\",\n  },\n  closeButton: {\n    float: \"right\",\n    width: \"50px\",\n    margin: \"10px\",\n  },\n}));\n\nfunction ReverseSalaryCalculator() {\n  const classes = useStyles();\n  const [data, setData] = useState({\n    annual401k: \"10\",\n    employerMatch: \"5\",\n    incomeTax: \"35\",\n    housingCost: \"2000\",\n    savings: \"2000\",\n    budget: {\n      min: \"0\",\n      max: \"0\",\n    },\n  });\n  const [openDetails, setOpenDetails] = useState(false);\n  const [salary, setSalary] = useState({\n    preTax: [],\n    postTax: [],\n  });\n\n  const calculate = (budget) => {\n    const after =\n      (budget + parseInt(data.savings) + parseInt(data.housingCost)) * 12;\n    const before =\n      after /\n      (1 - parseInt(data.incomeTax) / 100) /\n      (1 - parseInt(data.annual401k) / 100);\n    return { preTax: before.toFixed(0), postTax: after.toFixed(0) };\n  };\n\n  const handleCalculate = () => {\n    const minTotals = calculate(parseInt(data.budget.min));\n    const maxTotals = calculate(parseInt(data.budget.max));\n\n    setSalary({\n      preTax: [minTotals.preTax, maxTotals.preTax],\n      postTax: [minTotals.postTax, maxTotals.postTax],\n    });\n    setOpenDetails(true);\n  };\n\n  return (\n    <div className=\"rsc\">\n       {/* <h1>Reverse Salary Calculator</h1> */}\n      <div className=\"rsc-form\">\n        <div>\n          <h2>Annual 401k contribution</h2>\n          <TextField\n            value={data.annual401k}\n            onChange={(e) =>\n              setData((prevData) => ({\n                ...prevData,\n                annual401k: e.target.value,\n              }))\n            }\n          />{\" \"}\n          %<h2>Employer match percentage</h2>\n          <TextField\n            value={data.employerMatch}\n            onChange={(e) =>\n              setData((prevData) => ({\n                ...prevData,\n                employerMatch: e.target.value,\n              }))\n            }\n          />\n          %<h2>Estimated total income tax contribution</h2>\n          <TextField\n            value={data.incomeTax}\n            onChange={(e) =>\n              setData((prevData) => ({\n                ...prevData,\n                incomeTax: e.target.value,\n              }))\n            }\n          />\n          %<h2>Estimated total housing cost (monthly)</h2>\n          <TextField\n            value={data.housingCost}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">$</InputAdornment>\n              ),\n            }}\n            onChange={(e) =>\n              setData((prevData) => ({\n                ...prevData,\n                housingCost: e.target.value,\n              }))\n            }\n          />\n          <h2>Estimated Savings - \"Pay Yourself First\" (monthly)</h2>\n          <TextField\n            value={data.savings}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">$</InputAdornment>\n              ),\n            }}\n            onChange={(e) =>\n              setData((prevData) => ({ ...prevData, savings: e.target.value }))\n            }\n          />\n          <h2>Spending Budget (monthly)</h2>\n          Min:{\" \"}\n          <TextField\n            value={data.budget.min}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">$</InputAdornment>\n              ),\n            }}\n            onChange={(e) =>\n              setData((prevData) => ({\n                ...prevData,\n                budget: { ...prevData.budget, min: e.target.value },\n              }))\n            }\n          />{\" \"}\n          Max:{\" \"}\n          <TextField\n            value={data.budget.max}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">$</InputAdornment>\n              ),\n            }}\n            onChange={(e) =>\n              setData((prevData) => ({\n                ...prevData,\n                budget: { ...prevData.budget, max: e.target.value },\n              }))\n            }\n          />\n        </div>\n        <center>\n          <Button className={classes.goButton} onClick={handleCalculate}>\n            Go\n          </Button>\n        </center>\n      </div>\n      <DetailsPopup\n        openDetails={openDetails}\n        setOpenDetails={setOpenDetails}\n        salary={salary}\n      />\n    </div>\n  );\n}\n\nfunction DetailsPopup({ salary, openDetails, setOpenDetails }) {\n  const classes = useStyles();\n  return (\n    <Dialog open={openDetails} onClose={() => setOpenDetails(false)}>\n      <div>\n        <table id=\"rsc-table\">\n          <tr>\n            <td style={{ width: \"150px\" }}></td>\n            <th style={{ width: \"100px\" }}>Min Budget</th>\n            <th style={{ width: \"100px\" }}>Max Budget</th>\n          </tr>\n          <tr>\n            <th>Annual Before Tax</th>\n            <td>{salary.preTax[0]}</td>\n            <td>{salary.preTax[1]}</td>\n          </tr>\n          <tr>\n            <th>Annual After Tax</th>\n            <td>{salary.postTax[0]}</td>\n            <td>{salary.postTax[1]}</td>\n          </tr>\n          <tr>\n            <th>Monthly After Tax</th>\n            <td>{salary.postTax[0] / 12}</td>\n            <td>{salary.postTax[1] / 12}</td>\n          </tr>\n        </table>\n        <Button\n          className={classes.closeButton}\n          onClick={() => setOpenDetails(false)}\n        >\n          Close\n        </Button>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default ReverseSalaryCalculator;\n","import { Box, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport \"./styles.css\";\nimport ReverseSalaryCalculator from \"./ReverseSalaryCalculator\";\n\nconst useStyles = makeStyles(() => ({\n  item: {\n    width: \"150px\",\n    height: \"150px\",\n    padding: \"20px\",\n    fontSize: \"25px\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    backgroundColor: \"lavender\",\n  },\n  box: {\n    display: \"flex\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [show, setShow] = useState(null);\n  const products = [\"Reverse Salary Calculator\"];\n  return (\n    <div className=\"App\">\n      <div className=\"home\">\n        <div id=\"site-header\">\n          <h1 className=\"page-title\">AIVIE</h1>\n          <p>Financial Independence Toolkit</p>\n        </div>\n        <Box className={classes.box}>\n          {products.map((product, i) => (\n            <Paper className={classes.item} onClick={() => setShow(i)}>\n              {product}\n            </Paper>\n          ))}\n        </Box>\n        {show === 0 ? <ReverseSalaryCalculator /> : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}